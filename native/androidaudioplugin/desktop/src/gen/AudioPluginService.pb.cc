// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AudioPluginService.proto

#include "AudioPluginService.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_AudioPluginService_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_AudioPluginService_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Extension;
}  // namespace protobuf_AudioPluginService_2eproto
namespace org {
namespace androidaudioplugin {
class UnitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Unit>
      _instance;
} _Unit_default_instance_;
class AliveStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AliveStatus>
      _instance;
} _AliveStatus_default_instance_;
class SizeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Size>
      _instance;
} _Size_default_instance_;
class InstanceIdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InstanceId>
      _instance;
} _InstanceId_default_instance_;
class CreateRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateRequest>
      _instance;
} _CreateRequest_default_instance_;
class ExtensionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Extension>
      _instance;
} _Extension_default_instance_;
class GetStateRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetStateRequest>
      _instance;
} _GetStateRequest_default_instance_;
class SetStateRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SetStateRequest>
      _instance;
} _SetStateRequest_default_instance_;
class PrepareRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PrepareRequest>
      _instance;
} _PrepareRequest_default_instance_;
class ProcessRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProcessRequest>
      _instance;
} _ProcessRequest_default_instance_;
}  // namespace androidaudioplugin
}  // namespace org
namespace protobuf_AudioPluginService_2eproto {
static void InitDefaultsUnit() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::androidaudioplugin::_Unit_default_instance_;
    new (ptr) ::org::androidaudioplugin::Unit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::androidaudioplugin::Unit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Unit =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUnit}, {}};

static void InitDefaultsAliveStatus() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::androidaudioplugin::_AliveStatus_default_instance_;
    new (ptr) ::org::androidaudioplugin::AliveStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::androidaudioplugin::AliveStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AliveStatus =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAliveStatus}, {}};

static void InitDefaultsSize() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::androidaudioplugin::_Size_default_instance_;
    new (ptr) ::org::androidaudioplugin::Size();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::androidaudioplugin::Size::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Size =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSize}, {}};

static void InitDefaultsInstanceId() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::androidaudioplugin::_InstanceId_default_instance_;
    new (ptr) ::org::androidaudioplugin::InstanceId();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::androidaudioplugin::InstanceId::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_InstanceId =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInstanceId}, {}};

static void InitDefaultsCreateRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::androidaudioplugin::_CreateRequest_default_instance_;
    new (ptr) ::org::androidaudioplugin::CreateRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::androidaudioplugin::CreateRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CreateRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCreateRequest}, {
      &protobuf_AudioPluginService_2eproto::scc_info_Extension.base,}};

static void InitDefaultsExtension() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::androidaudioplugin::_Extension_default_instance_;
    new (ptr) ::org::androidaudioplugin::Extension();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::androidaudioplugin::Extension::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Extension =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsExtension}, {}};

static void InitDefaultsGetStateRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::androidaudioplugin::_GetStateRequest_default_instance_;
    new (ptr) ::org::androidaudioplugin::GetStateRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::androidaudioplugin::GetStateRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetStateRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetStateRequest}, {}};

static void InitDefaultsSetStateRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::androidaudioplugin::_SetStateRequest_default_instance_;
    new (ptr) ::org::androidaudioplugin::SetStateRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::androidaudioplugin::SetStateRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SetStateRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSetStateRequest}, {}};

static void InitDefaultsPrepareRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::androidaudioplugin::_PrepareRequest_default_instance_;
    new (ptr) ::org::androidaudioplugin::PrepareRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::androidaudioplugin::PrepareRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PrepareRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPrepareRequest}, {}};

static void InitDefaultsProcessRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::androidaudioplugin::_ProcessRequest_default_instance_;
    new (ptr) ::org::androidaudioplugin::ProcessRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::androidaudioplugin::ProcessRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ProcessRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProcessRequest}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Unit.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AliveStatus.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Size.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InstanceId.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CreateRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Extension.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetStateRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SetStateRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PrepareRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ProcessRequest.base);
}

::google::protobuf::Metadata file_level_metadata[10];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::org::androidaudioplugin::Unit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::org::androidaudioplugin::AliveStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::org::androidaudioplugin::AliveStatus, is_alive_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::org::androidaudioplugin::Size, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::org::androidaudioplugin::Size, size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::org::androidaudioplugin::InstanceId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::org::androidaudioplugin::InstanceId, instance_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::org::androidaudioplugin::CreateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::org::androidaudioplugin::CreateRequest, plugin_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::org::androidaudioplugin::CreateRequest, sample_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::org::androidaudioplugin::CreateRequest, extensions_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::org::androidaudioplugin::Extension, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::org::androidaudioplugin::Extension, uri_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::org::androidaudioplugin::Extension, fd_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::org::androidaudioplugin::GetStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::org::androidaudioplugin::GetStateRequest, instance_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::org::androidaudioplugin::GetStateRequest, shared_memory_fd_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::org::androidaudioplugin::SetStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::org::androidaudioplugin::SetStateRequest, instance_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::org::androidaudioplugin::SetStateRequest, shared_memory_fd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::org::androidaudioplugin::SetStateRequest, size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::org::androidaudioplugin::PrepareRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::org::androidaudioplugin::PrepareRequest, instance_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::org::androidaudioplugin::PrepareRequest, frame_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::org::androidaudioplugin::PrepareRequest, port_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::org::androidaudioplugin::PrepareRequest, shared_memory_fds_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::org::androidaudioplugin::ProcessRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::org::androidaudioplugin::ProcessRequest, instance_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::org::androidaudioplugin::ProcessRequest, timeout_nanoseconds_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::org::androidaudioplugin::Unit)},
  { 5, -1, sizeof(::org::androidaudioplugin::AliveStatus)},
  { 11, -1, sizeof(::org::androidaudioplugin::Size)},
  { 17, -1, sizeof(::org::androidaudioplugin::InstanceId)},
  { 23, -1, sizeof(::org::androidaudioplugin::CreateRequest)},
  { 31, -1, sizeof(::org::androidaudioplugin::Extension)},
  { 38, -1, sizeof(::org::androidaudioplugin::GetStateRequest)},
  { 45, -1, sizeof(::org::androidaudioplugin::SetStateRequest)},
  { 53, -1, sizeof(::org::androidaudioplugin::PrepareRequest)},
  { 62, -1, sizeof(::org::androidaudioplugin::ProcessRequest)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::org::androidaudioplugin::_Unit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::org::androidaudioplugin::_AliveStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::org::androidaudioplugin::_Size_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::org::androidaudioplugin::_InstanceId_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::org::androidaudioplugin::_CreateRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::org::androidaudioplugin::_Extension_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::org::androidaudioplugin::_GetStateRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::org::androidaudioplugin::_SetStateRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::org::androidaudioplugin::_PrepareRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::org::androidaudioplugin::_ProcessRequest_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "AudioPluginService.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\030AudioPluginService.proto\022\026org.androida"
      "udioplugin\"\006\n\004Unit\"\037\n\013AliveStatus\022\020\n\010is_"
      "alive\030\001 \001(\010\"\024\n\004Size\022\014\n\004size\030\001 \001(\005\"!\n\nIns"
      "tanceId\022\023\n\013instance_id\030\001 \001(\005\"n\n\rCreateRe"
      "quest\022\021\n\tplugin_id\030\001 \001(\t\022\023\n\013sample_rate\030"
      "\002 \001(\005\0225\n\nextensions\030\003 \003(\0132!.org.androida"
      "udioplugin.Extension\"$\n\tExtension\022\013\n\003uri"
      "\030\001 \001(\t\022\n\n\002fd\030\002 \001(\003\"@\n\017GetStateRequest\022\023\n"
      "\013instance_id\030\001 \001(\005\022\030\n\020shared_memory_fd\030\002"
      " \001(\003\"N\n\017SetStateRequest\022\023\n\013instance_id\030\001"
      " \001(\005\022\030\n\020shared_memory_fd\030\002 \001(\003\022\014\n\004size\030\003"
      " \001(\005\"i\n\016PrepareRequest\022\023\n\013instance_id\030\001 "
      "\001(\005\022\023\n\013frame_count\030\002 \001(\005\022\022\n\nport_count\030\003"
      " \001(\005\022\031\n\021shared_memory_fds\030\004 \003(\005\"B\n\016Proce"
      "ssRequest\022\023\n\013instance_id\030\001 \001(\005\022\033\n\023timeou"
      "t_nanoseconds\030\002 \001(\0052\334\006\n\022AudioPluginServi"
      "ce\022U\n\006Create\022%.org.androidaudioplugin.Cr"
      "eateRequest\032\".org.androidaudioplugin.Ins"
      "tanceId\"\000\022Z\n\rIsPluginAlive\022\".org.android"
      "audioplugin.InstanceId\032#.org.androidaudi"
      "oplugin.AliveStatus\"\000\022R\n\014GetStateSize\022\"."
      "org.androidaudioplugin.InstanceId\032\034.org."
      "androidaudioplugin.Size\"\000\022S\n\010GetState\022\'."
      "org.androidaudioplugin.GetStateRequest\032\034"
      ".org.androidaudioplugin.Unit\"\000\022S\n\010SetSta"
      "te\022\'.org.androidaudioplugin.SetStateRequ"
      "est\032\034.org.androidaudioplugin.Unit\"\000\022Q\n\007P"
      "repare\022&.org.androidaudioplugin.PrepareR"
      "equest\032\034.org.androidaudioplugin.Unit\"\000\022N"
      "\n\010Activate\022\".org.androidaudioplugin.Inst"
      "anceId\032\034.org.androidaudioplugin.Unit\"\000\022Q"
      "\n\007Process\022&.org.androidaudioplugin.Proce"
      "ssRequest\032\034.org.androidaudioplugin.Unit\""
      "\000\022P\n\nDeactivate\022\".org.androidaudioplugin"
      ".InstanceId\032\034.org.androidaudioplugin.Uni"
      "t\"\000\022M\n\007Destroy\022\".org.androidaudioplugin."
      "InstanceId\032\034.org.androidaudioplugin.Unit"
      "\"\000b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1490);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AudioPluginService.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_AudioPluginService_2eproto
namespace org {
namespace androidaudioplugin {

// ===================================================================

void Unit::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Unit::Unit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_AudioPluginService_2eproto::scc_info_Unit.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.androidaudioplugin.Unit)
}
Unit::Unit(const Unit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:org.androidaudioplugin.Unit)
}

void Unit::SharedCtor() {
}

Unit::~Unit() {
  // @@protoc_insertion_point(destructor:org.androidaudioplugin.Unit)
  SharedDtor();
}

void Unit::SharedDtor() {
}

void Unit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Unit::descriptor() {
  ::protobuf_AudioPluginService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AudioPluginService_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Unit& Unit::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_AudioPluginService_2eproto::scc_info_Unit.base);
  return *internal_default_instance();
}


void Unit::Clear() {
// @@protoc_insertion_point(message_clear_start:org.androidaudioplugin.Unit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool Unit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.androidaudioplugin.Unit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:org.androidaudioplugin.Unit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.androidaudioplugin.Unit)
  return false;
#undef DO_
}

void Unit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.androidaudioplugin.Unit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:org.androidaudioplugin.Unit)
}

::google::protobuf::uint8* Unit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:org.androidaudioplugin.Unit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.androidaudioplugin.Unit)
  return target;
}

size_t Unit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.androidaudioplugin.Unit)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Unit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.androidaudioplugin.Unit)
  GOOGLE_DCHECK_NE(&from, this);
  const Unit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Unit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.androidaudioplugin.Unit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.androidaudioplugin.Unit)
    MergeFrom(*source);
  }
}

void Unit::MergeFrom(const Unit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.androidaudioplugin.Unit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Unit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.androidaudioplugin.Unit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Unit::CopyFrom(const Unit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.androidaudioplugin.Unit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Unit::IsInitialized() const {
  return true;
}

void Unit::Swap(Unit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Unit::InternalSwap(Unit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Unit::GetMetadata() const {
  protobuf_AudioPluginService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AudioPluginService_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AliveStatus::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AliveStatus::kIsAliveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AliveStatus::AliveStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_AudioPluginService_2eproto::scc_info_AliveStatus.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.androidaudioplugin.AliveStatus)
}
AliveStatus::AliveStatus(const AliveStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_alive_ = from.is_alive_;
  // @@protoc_insertion_point(copy_constructor:org.androidaudioplugin.AliveStatus)
}

void AliveStatus::SharedCtor() {
  is_alive_ = false;
}

AliveStatus::~AliveStatus() {
  // @@protoc_insertion_point(destructor:org.androidaudioplugin.AliveStatus)
  SharedDtor();
}

void AliveStatus::SharedDtor() {
}

void AliveStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AliveStatus::descriptor() {
  ::protobuf_AudioPluginService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AudioPluginService_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AliveStatus& AliveStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_AudioPluginService_2eproto::scc_info_AliveStatus.base);
  return *internal_default_instance();
}


void AliveStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:org.androidaudioplugin.AliveStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_alive_ = false;
  _internal_metadata_.Clear();
}

bool AliveStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.androidaudioplugin.AliveStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_alive = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_alive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.androidaudioplugin.AliveStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.androidaudioplugin.AliveStatus)
  return false;
#undef DO_
}

void AliveStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.androidaudioplugin.AliveStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_alive = 1;
  if (this->is_alive() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_alive(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:org.androidaudioplugin.AliveStatus)
}

::google::protobuf::uint8* AliveStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:org.androidaudioplugin.AliveStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_alive = 1;
  if (this->is_alive() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_alive(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.androidaudioplugin.AliveStatus)
  return target;
}

size_t AliveStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.androidaudioplugin.AliveStatus)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool is_alive = 1;
  if (this->is_alive() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AliveStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.androidaudioplugin.AliveStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const AliveStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AliveStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.androidaudioplugin.AliveStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.androidaudioplugin.AliveStatus)
    MergeFrom(*source);
  }
}

void AliveStatus::MergeFrom(const AliveStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.androidaudioplugin.AliveStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_alive() != 0) {
    set_is_alive(from.is_alive());
  }
}

void AliveStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.androidaudioplugin.AliveStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AliveStatus::CopyFrom(const AliveStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.androidaudioplugin.AliveStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AliveStatus::IsInitialized() const {
  return true;
}

void AliveStatus::Swap(AliveStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AliveStatus::InternalSwap(AliveStatus* other) {
  using std::swap;
  swap(is_alive_, other->is_alive_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AliveStatus::GetMetadata() const {
  protobuf_AudioPluginService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AudioPluginService_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Size::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Size::kSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Size::Size()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_AudioPluginService_2eproto::scc_info_Size.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.androidaudioplugin.Size)
}
Size::Size(const Size& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:org.androidaudioplugin.Size)
}

void Size::SharedCtor() {
  size_ = 0;
}

Size::~Size() {
  // @@protoc_insertion_point(destructor:org.androidaudioplugin.Size)
  SharedDtor();
}

void Size::SharedDtor() {
}

void Size::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Size::descriptor() {
  ::protobuf_AudioPluginService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AudioPluginService_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Size& Size::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_AudioPluginService_2eproto::scc_info_Size.base);
  return *internal_default_instance();
}


void Size::Clear() {
// @@protoc_insertion_point(message_clear_start:org.androidaudioplugin.Size)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  size_ = 0;
  _internal_metadata_.Clear();
}

bool Size::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.androidaudioplugin.Size)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 size = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.androidaudioplugin.Size)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.androidaudioplugin.Size)
  return false;
#undef DO_
}

void Size::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.androidaudioplugin.Size)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 size = 1;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:org.androidaudioplugin.Size)
}

::google::protobuf::uint8* Size::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:org.androidaudioplugin.Size)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 size = 1;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->size(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.androidaudioplugin.Size)
  return target;
}

size_t Size::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.androidaudioplugin.Size)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 size = 1;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Size::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.androidaudioplugin.Size)
  GOOGLE_DCHECK_NE(&from, this);
  const Size* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Size>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.androidaudioplugin.Size)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.androidaudioplugin.Size)
    MergeFrom(*source);
  }
}

void Size::MergeFrom(const Size& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.androidaudioplugin.Size)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.size() != 0) {
    set_size(from.size());
  }
}

void Size::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.androidaudioplugin.Size)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Size::CopyFrom(const Size& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.androidaudioplugin.Size)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Size::IsInitialized() const {
  return true;
}

void Size::Swap(Size* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Size::InternalSwap(Size* other) {
  using std::swap;
  swap(size_, other->size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Size::GetMetadata() const {
  protobuf_AudioPluginService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AudioPluginService_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void InstanceId::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InstanceId::kInstanceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InstanceId::InstanceId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_AudioPluginService_2eproto::scc_info_InstanceId.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.androidaudioplugin.InstanceId)
}
InstanceId::InstanceId(const InstanceId& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  instance_id_ = from.instance_id_;
  // @@protoc_insertion_point(copy_constructor:org.androidaudioplugin.InstanceId)
}

void InstanceId::SharedCtor() {
  instance_id_ = 0;
}

InstanceId::~InstanceId() {
  // @@protoc_insertion_point(destructor:org.androidaudioplugin.InstanceId)
  SharedDtor();
}

void InstanceId::SharedDtor() {
}

void InstanceId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* InstanceId::descriptor() {
  ::protobuf_AudioPluginService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AudioPluginService_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InstanceId& InstanceId::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_AudioPluginService_2eproto::scc_info_InstanceId.base);
  return *internal_default_instance();
}


void InstanceId::Clear() {
// @@protoc_insertion_point(message_clear_start:org.androidaudioplugin.InstanceId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instance_id_ = 0;
  _internal_metadata_.Clear();
}

bool InstanceId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.androidaudioplugin.InstanceId)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 instance_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instance_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.androidaudioplugin.InstanceId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.androidaudioplugin.InstanceId)
  return false;
#undef DO_
}

void InstanceId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.androidaudioplugin.InstanceId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 instance_id = 1;
  if (this->instance_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->instance_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:org.androidaudioplugin.InstanceId)
}

::google::protobuf::uint8* InstanceId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:org.androidaudioplugin.InstanceId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 instance_id = 1;
  if (this->instance_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->instance_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.androidaudioplugin.InstanceId)
  return target;
}

size_t InstanceId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.androidaudioplugin.InstanceId)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 instance_id = 1;
  if (this->instance_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->instance_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InstanceId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.androidaudioplugin.InstanceId)
  GOOGLE_DCHECK_NE(&from, this);
  const InstanceId* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InstanceId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.androidaudioplugin.InstanceId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.androidaudioplugin.InstanceId)
    MergeFrom(*source);
  }
}

void InstanceId::MergeFrom(const InstanceId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.androidaudioplugin.InstanceId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.instance_id() != 0) {
    set_instance_id(from.instance_id());
  }
}

void InstanceId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.androidaudioplugin.InstanceId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstanceId::CopyFrom(const InstanceId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.androidaudioplugin.InstanceId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstanceId::IsInitialized() const {
  return true;
}

void InstanceId::Swap(InstanceId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InstanceId::InternalSwap(InstanceId* other) {
  using std::swap;
  swap(instance_id_, other->instance_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata InstanceId::GetMetadata() const {
  protobuf_AudioPluginService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AudioPluginService_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CreateRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateRequest::kPluginIdFieldNumber;
const int CreateRequest::kSampleRateFieldNumber;
const int CreateRequest::kExtensionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateRequest::CreateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_AudioPluginService_2eproto::scc_info_CreateRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.androidaudioplugin.CreateRequest)
}
CreateRequest::CreateRequest(const CreateRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      extensions_(from.extensions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  plugin_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.plugin_id().size() > 0) {
    plugin_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.plugin_id_);
  }
  sample_rate_ = from.sample_rate_;
  // @@protoc_insertion_point(copy_constructor:org.androidaudioplugin.CreateRequest)
}

void CreateRequest::SharedCtor() {
  plugin_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sample_rate_ = 0;
}

CreateRequest::~CreateRequest() {
  // @@protoc_insertion_point(destructor:org.androidaudioplugin.CreateRequest)
  SharedDtor();
}

void CreateRequest::SharedDtor() {
  plugin_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CreateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CreateRequest::descriptor() {
  ::protobuf_AudioPluginService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AudioPluginService_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateRequest& CreateRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_AudioPluginService_2eproto::scc_info_CreateRequest.base);
  return *internal_default_instance();
}


void CreateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:org.androidaudioplugin.CreateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extensions_.Clear();
  plugin_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sample_rate_ = 0;
  _internal_metadata_.Clear();
}

bool CreateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.androidaudioplugin.CreateRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string plugin_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_plugin_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->plugin_id().data(), static_cast<int>(this->plugin_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "org.androidaudioplugin.CreateRequest.plugin_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sample_rate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sample_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .org.androidaudioplugin.Extension extensions = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_extensions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.androidaudioplugin.CreateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.androidaudioplugin.CreateRequest)
  return false;
#undef DO_
}

void CreateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.androidaudioplugin.CreateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string plugin_id = 1;
  if (this->plugin_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->plugin_id().data(), static_cast<int>(this->plugin_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "org.androidaudioplugin.CreateRequest.plugin_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->plugin_id(), output);
  }

  // int32 sample_rate = 2;
  if (this->sample_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sample_rate(), output);
  }

  // repeated .org.androidaudioplugin.Extension extensions = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->extensions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->extensions(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:org.androidaudioplugin.CreateRequest)
}

::google::protobuf::uint8* CreateRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:org.androidaudioplugin.CreateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string plugin_id = 1;
  if (this->plugin_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->plugin_id().data(), static_cast<int>(this->plugin_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "org.androidaudioplugin.CreateRequest.plugin_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->plugin_id(), target);
  }

  // int32 sample_rate = 2;
  if (this->sample_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sample_rate(), target);
  }

  // repeated .org.androidaudioplugin.Extension extensions = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->extensions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->extensions(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.androidaudioplugin.CreateRequest)
  return target;
}

size_t CreateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.androidaudioplugin.CreateRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .org.androidaudioplugin.Extension extensions = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->extensions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->extensions(static_cast<int>(i)));
    }
  }

  // string plugin_id = 1;
  if (this->plugin_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->plugin_id());
  }

  // int32 sample_rate = 2;
  if (this->sample_rate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sample_rate());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.androidaudioplugin.CreateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.androidaudioplugin.CreateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.androidaudioplugin.CreateRequest)
    MergeFrom(*source);
  }
}

void CreateRequest::MergeFrom(const CreateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.androidaudioplugin.CreateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  extensions_.MergeFrom(from.extensions_);
  if (from.plugin_id().size() > 0) {

    plugin_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.plugin_id_);
  }
  if (from.sample_rate() != 0) {
    set_sample_rate(from.sample_rate());
  }
}

void CreateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.androidaudioplugin.CreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateRequest::CopyFrom(const CreateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.androidaudioplugin.CreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRequest::IsInitialized() const {
  return true;
}

void CreateRequest::Swap(CreateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateRequest::InternalSwap(CreateRequest* other) {
  using std::swap;
  CastToBase(&extensions_)->InternalSwap(CastToBase(&other->extensions_));
  plugin_id_.Swap(&other->plugin_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sample_rate_, other->sample_rate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CreateRequest::GetMetadata() const {
  protobuf_AudioPluginService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AudioPluginService_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Extension::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Extension::kUriFieldNumber;
const int Extension::kFdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Extension::Extension()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_AudioPluginService_2eproto::scc_info_Extension.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.androidaudioplugin.Extension)
}
Extension::Extension(const Extension& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uri().size() > 0) {
    uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
  }
  fd_ = from.fd_;
  // @@protoc_insertion_point(copy_constructor:org.androidaudioplugin.Extension)
}

void Extension::SharedCtor() {
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fd_ = GOOGLE_LONGLONG(0);
}

Extension::~Extension() {
  // @@protoc_insertion_point(destructor:org.androidaudioplugin.Extension)
  SharedDtor();
}

void Extension::SharedDtor() {
  uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Extension::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Extension::descriptor() {
  ::protobuf_AudioPluginService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AudioPluginService_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Extension& Extension::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_AudioPluginService_2eproto::scc_info_Extension.base);
  return *internal_default_instance();
}


void Extension::Clear() {
// @@protoc_insertion_point(message_clear_start:org.androidaudioplugin.Extension)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fd_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool Extension::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.androidaudioplugin.Extension)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string uri = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uri().data(), static_cast<int>(this->uri().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "org.androidaudioplugin.Extension.uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 fd = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.androidaudioplugin.Extension)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.androidaudioplugin.Extension)
  return false;
#undef DO_
}

void Extension::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.androidaudioplugin.Extension)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uri = 1;
  if (this->uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uri().data(), static_cast<int>(this->uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "org.androidaudioplugin.Extension.uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uri(), output);
  }

  // int64 fd = 2;
  if (this->fd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->fd(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:org.androidaudioplugin.Extension)
}

::google::protobuf::uint8* Extension::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:org.androidaudioplugin.Extension)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uri = 1;
  if (this->uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uri().data(), static_cast<int>(this->uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "org.androidaudioplugin.Extension.uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uri(), target);
  }

  // int64 fd = 2;
  if (this->fd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->fd(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.androidaudioplugin.Extension)
  return target;
}

size_t Extension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.androidaudioplugin.Extension)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string uri = 1;
  if (this->uri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uri());
  }

  // int64 fd = 2;
  if (this->fd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->fd());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Extension::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.androidaudioplugin.Extension)
  GOOGLE_DCHECK_NE(&from, this);
  const Extension* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Extension>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.androidaudioplugin.Extension)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.androidaudioplugin.Extension)
    MergeFrom(*source);
  }
}

void Extension::MergeFrom(const Extension& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.androidaudioplugin.Extension)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uri().size() > 0) {

    uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
  }
  if (from.fd() != 0) {
    set_fd(from.fd());
  }
}

void Extension::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.androidaudioplugin.Extension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Extension::CopyFrom(const Extension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.androidaudioplugin.Extension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Extension::IsInitialized() const {
  return true;
}

void Extension::Swap(Extension* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Extension::InternalSwap(Extension* other) {
  using std::swap;
  uri_.Swap(&other->uri_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(fd_, other->fd_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Extension::GetMetadata() const {
  protobuf_AudioPluginService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AudioPluginService_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetStateRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetStateRequest::kInstanceIdFieldNumber;
const int GetStateRequest::kSharedMemoryFdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetStateRequest::GetStateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_AudioPluginService_2eproto::scc_info_GetStateRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.androidaudioplugin.GetStateRequest)
}
GetStateRequest::GetStateRequest(const GetStateRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&shared_memory_fd_, &from.shared_memory_fd_,
    static_cast<size_t>(reinterpret_cast<char*>(&instance_id_) -
    reinterpret_cast<char*>(&shared_memory_fd_)) + sizeof(instance_id_));
  // @@protoc_insertion_point(copy_constructor:org.androidaudioplugin.GetStateRequest)
}

void GetStateRequest::SharedCtor() {
  ::memset(&shared_memory_fd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&instance_id_) -
      reinterpret_cast<char*>(&shared_memory_fd_)) + sizeof(instance_id_));
}

GetStateRequest::~GetStateRequest() {
  // @@protoc_insertion_point(destructor:org.androidaudioplugin.GetStateRequest)
  SharedDtor();
}

void GetStateRequest::SharedDtor() {
}

void GetStateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetStateRequest::descriptor() {
  ::protobuf_AudioPluginService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AudioPluginService_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetStateRequest& GetStateRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_AudioPluginService_2eproto::scc_info_GetStateRequest.base);
  return *internal_default_instance();
}


void GetStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:org.androidaudioplugin.GetStateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&shared_memory_fd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&instance_id_) -
      reinterpret_cast<char*>(&shared_memory_fd_)) + sizeof(instance_id_));
  _internal_metadata_.Clear();
}

bool GetStateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.androidaudioplugin.GetStateRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 instance_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instance_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 shared_memory_fd = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &shared_memory_fd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.androidaudioplugin.GetStateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.androidaudioplugin.GetStateRequest)
  return false;
#undef DO_
}

void GetStateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.androidaudioplugin.GetStateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 instance_id = 1;
  if (this->instance_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->instance_id(), output);
  }

  // int64 shared_memory_fd = 2;
  if (this->shared_memory_fd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->shared_memory_fd(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:org.androidaudioplugin.GetStateRequest)
}

::google::protobuf::uint8* GetStateRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:org.androidaudioplugin.GetStateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 instance_id = 1;
  if (this->instance_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->instance_id(), target);
  }

  // int64 shared_memory_fd = 2;
  if (this->shared_memory_fd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->shared_memory_fd(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.androidaudioplugin.GetStateRequest)
  return target;
}

size_t GetStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.androidaudioplugin.GetStateRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 shared_memory_fd = 2;
  if (this->shared_memory_fd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->shared_memory_fd());
  }

  // int32 instance_id = 1;
  if (this->instance_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->instance_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetStateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.androidaudioplugin.GetStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStateRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetStateRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.androidaudioplugin.GetStateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.androidaudioplugin.GetStateRequest)
    MergeFrom(*source);
  }
}

void GetStateRequest::MergeFrom(const GetStateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.androidaudioplugin.GetStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.shared_memory_fd() != 0) {
    set_shared_memory_fd(from.shared_memory_fd());
  }
  if (from.instance_id() != 0) {
    set_instance_id(from.instance_id());
  }
}

void GetStateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.androidaudioplugin.GetStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStateRequest::CopyFrom(const GetStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.androidaudioplugin.GetStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStateRequest::IsInitialized() const {
  return true;
}

void GetStateRequest::Swap(GetStateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetStateRequest::InternalSwap(GetStateRequest* other) {
  using std::swap;
  swap(shared_memory_fd_, other->shared_memory_fd_);
  swap(instance_id_, other->instance_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetStateRequest::GetMetadata() const {
  protobuf_AudioPluginService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AudioPluginService_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SetStateRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetStateRequest::kInstanceIdFieldNumber;
const int SetStateRequest::kSharedMemoryFdFieldNumber;
const int SetStateRequest::kSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetStateRequest::SetStateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_AudioPluginService_2eproto::scc_info_SetStateRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.androidaudioplugin.SetStateRequest)
}
SetStateRequest::SetStateRequest(const SetStateRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&shared_memory_fd_, &from.shared_memory_fd_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&shared_memory_fd_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:org.androidaudioplugin.SetStateRequest)
}

void SetStateRequest::SharedCtor() {
  ::memset(&shared_memory_fd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&shared_memory_fd_)) + sizeof(size_));
}

SetStateRequest::~SetStateRequest() {
  // @@protoc_insertion_point(destructor:org.androidaudioplugin.SetStateRequest)
  SharedDtor();
}

void SetStateRequest::SharedDtor() {
}

void SetStateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SetStateRequest::descriptor() {
  ::protobuf_AudioPluginService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AudioPluginService_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetStateRequest& SetStateRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_AudioPluginService_2eproto::scc_info_SetStateRequest.base);
  return *internal_default_instance();
}


void SetStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:org.androidaudioplugin.SetStateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&shared_memory_fd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&shared_memory_fd_)) + sizeof(size_));
  _internal_metadata_.Clear();
}

bool SetStateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.androidaudioplugin.SetStateRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 instance_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instance_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 shared_memory_fd = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &shared_memory_fd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.androidaudioplugin.SetStateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.androidaudioplugin.SetStateRequest)
  return false;
#undef DO_
}

void SetStateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.androidaudioplugin.SetStateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 instance_id = 1;
  if (this->instance_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->instance_id(), output);
  }

  // int64 shared_memory_fd = 2;
  if (this->shared_memory_fd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->shared_memory_fd(), output);
  }

  // int32 size = 3;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:org.androidaudioplugin.SetStateRequest)
}

::google::protobuf::uint8* SetStateRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:org.androidaudioplugin.SetStateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 instance_id = 1;
  if (this->instance_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->instance_id(), target);
  }

  // int64 shared_memory_fd = 2;
  if (this->shared_memory_fd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->shared_memory_fd(), target);
  }

  // int32 size = 3;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->size(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.androidaudioplugin.SetStateRequest)
  return target;
}

size_t SetStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.androidaudioplugin.SetStateRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 shared_memory_fd = 2;
  if (this->shared_memory_fd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->shared_memory_fd());
  }

  // int32 instance_id = 1;
  if (this->instance_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->instance_id());
  }

  // int32 size = 3;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetStateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.androidaudioplugin.SetStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetStateRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetStateRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.androidaudioplugin.SetStateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.androidaudioplugin.SetStateRequest)
    MergeFrom(*source);
  }
}

void SetStateRequest::MergeFrom(const SetStateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.androidaudioplugin.SetStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.shared_memory_fd() != 0) {
    set_shared_memory_fd(from.shared_memory_fd());
  }
  if (from.instance_id() != 0) {
    set_instance_id(from.instance_id());
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
}

void SetStateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.androidaudioplugin.SetStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetStateRequest::CopyFrom(const SetStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.androidaudioplugin.SetStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetStateRequest::IsInitialized() const {
  return true;
}

void SetStateRequest::Swap(SetStateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetStateRequest::InternalSwap(SetStateRequest* other) {
  using std::swap;
  swap(shared_memory_fd_, other->shared_memory_fd_);
  swap(instance_id_, other->instance_id_);
  swap(size_, other->size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SetStateRequest::GetMetadata() const {
  protobuf_AudioPluginService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AudioPluginService_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PrepareRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrepareRequest::kInstanceIdFieldNumber;
const int PrepareRequest::kFrameCountFieldNumber;
const int PrepareRequest::kPortCountFieldNumber;
const int PrepareRequest::kSharedMemoryFdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrepareRequest::PrepareRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_AudioPluginService_2eproto::scc_info_PrepareRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.androidaudioplugin.PrepareRequest)
}
PrepareRequest::PrepareRequest(const PrepareRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      shared_memory_fds_(from.shared_memory_fds_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&instance_id_, &from.instance_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_count_) -
    reinterpret_cast<char*>(&instance_id_)) + sizeof(port_count_));
  // @@protoc_insertion_point(copy_constructor:org.androidaudioplugin.PrepareRequest)
}

void PrepareRequest::SharedCtor() {
  ::memset(&instance_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_count_) -
      reinterpret_cast<char*>(&instance_id_)) + sizeof(port_count_));
}

PrepareRequest::~PrepareRequest() {
  // @@protoc_insertion_point(destructor:org.androidaudioplugin.PrepareRequest)
  SharedDtor();
}

void PrepareRequest::SharedDtor() {
}

void PrepareRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PrepareRequest::descriptor() {
  ::protobuf_AudioPluginService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AudioPluginService_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PrepareRequest& PrepareRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_AudioPluginService_2eproto::scc_info_PrepareRequest.base);
  return *internal_default_instance();
}


void PrepareRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:org.androidaudioplugin.PrepareRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shared_memory_fds_.Clear();
  ::memset(&instance_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_count_) -
      reinterpret_cast<char*>(&instance_id_)) + sizeof(port_count_));
  _internal_metadata_.Clear();
}

bool PrepareRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.androidaudioplugin.PrepareRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 instance_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instance_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 frame_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 port_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 shared_memory_fds = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_shared_memory_fds())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 34u, input, this->mutable_shared_memory_fds())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.androidaudioplugin.PrepareRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.androidaudioplugin.PrepareRequest)
  return false;
#undef DO_
}

void PrepareRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.androidaudioplugin.PrepareRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 instance_id = 1;
  if (this->instance_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->instance_id(), output);
  }

  // int32 frame_count = 2;
  if (this->frame_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->frame_count(), output);
  }

  // int32 port_count = 3;
  if (this->port_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port_count(), output);
  }

  // repeated int32 shared_memory_fds = 4;
  if (this->shared_memory_fds_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _shared_memory_fds_cached_byte_size_));
  }
  for (int i = 0, n = this->shared_memory_fds_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->shared_memory_fds(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:org.androidaudioplugin.PrepareRequest)
}

::google::protobuf::uint8* PrepareRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:org.androidaudioplugin.PrepareRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 instance_id = 1;
  if (this->instance_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->instance_id(), target);
  }

  // int32 frame_count = 2;
  if (this->frame_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->frame_count(), target);
  }

  // int32 port_count = 3;
  if (this->port_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port_count(), target);
  }

  // repeated int32 shared_memory_fds = 4;
  if (this->shared_memory_fds_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _shared_memory_fds_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->shared_memory_fds_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.androidaudioplugin.PrepareRequest)
  return target;
}

size_t PrepareRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.androidaudioplugin.PrepareRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 shared_memory_fds = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->shared_memory_fds_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _shared_memory_fds_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // int32 instance_id = 1;
  if (this->instance_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->instance_id());
  }

  // int32 frame_count = 2;
  if (this->frame_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frame_count());
  }

  // int32 port_count = 3;
  if (this->port_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrepareRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.androidaudioplugin.PrepareRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PrepareRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PrepareRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.androidaudioplugin.PrepareRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.androidaudioplugin.PrepareRequest)
    MergeFrom(*source);
  }
}

void PrepareRequest::MergeFrom(const PrepareRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.androidaudioplugin.PrepareRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shared_memory_fds_.MergeFrom(from.shared_memory_fds_);
  if (from.instance_id() != 0) {
    set_instance_id(from.instance_id());
  }
  if (from.frame_count() != 0) {
    set_frame_count(from.frame_count());
  }
  if (from.port_count() != 0) {
    set_port_count(from.port_count());
  }
}

void PrepareRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.androidaudioplugin.PrepareRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareRequest::CopyFrom(const PrepareRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.androidaudioplugin.PrepareRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareRequest::IsInitialized() const {
  return true;
}

void PrepareRequest::Swap(PrepareRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrepareRequest::InternalSwap(PrepareRequest* other) {
  using std::swap;
  shared_memory_fds_.InternalSwap(&other->shared_memory_fds_);
  swap(instance_id_, other->instance_id_);
  swap(frame_count_, other->frame_count_);
  swap(port_count_, other->port_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PrepareRequest::GetMetadata() const {
  protobuf_AudioPluginService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AudioPluginService_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ProcessRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProcessRequest::kInstanceIdFieldNumber;
const int ProcessRequest::kTimeoutNanosecondsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProcessRequest::ProcessRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_AudioPluginService_2eproto::scc_info_ProcessRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.androidaudioplugin.ProcessRequest)
}
ProcessRequest::ProcessRequest(const ProcessRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&instance_id_, &from.instance_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeout_nanoseconds_) -
    reinterpret_cast<char*>(&instance_id_)) + sizeof(timeout_nanoseconds_));
  // @@protoc_insertion_point(copy_constructor:org.androidaudioplugin.ProcessRequest)
}

void ProcessRequest::SharedCtor() {
  ::memset(&instance_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeout_nanoseconds_) -
      reinterpret_cast<char*>(&instance_id_)) + sizeof(timeout_nanoseconds_));
}

ProcessRequest::~ProcessRequest() {
  // @@protoc_insertion_point(destructor:org.androidaudioplugin.ProcessRequest)
  SharedDtor();
}

void ProcessRequest::SharedDtor() {
}

void ProcessRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ProcessRequest::descriptor() {
  ::protobuf_AudioPluginService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AudioPluginService_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProcessRequest& ProcessRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_AudioPluginService_2eproto::scc_info_ProcessRequest.base);
  return *internal_default_instance();
}


void ProcessRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:org.androidaudioplugin.ProcessRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&instance_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeout_nanoseconds_) -
      reinterpret_cast<char*>(&instance_id_)) + sizeof(timeout_nanoseconds_));
  _internal_metadata_.Clear();
}

bool ProcessRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.androidaudioplugin.ProcessRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 instance_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instance_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 timeout_nanoseconds = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeout_nanoseconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.androidaudioplugin.ProcessRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.androidaudioplugin.ProcessRequest)
  return false;
#undef DO_
}

void ProcessRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.androidaudioplugin.ProcessRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 instance_id = 1;
  if (this->instance_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->instance_id(), output);
  }

  // int32 timeout_nanoseconds = 2;
  if (this->timeout_nanoseconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->timeout_nanoseconds(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:org.androidaudioplugin.ProcessRequest)
}

::google::protobuf::uint8* ProcessRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:org.androidaudioplugin.ProcessRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 instance_id = 1;
  if (this->instance_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->instance_id(), target);
  }

  // int32 timeout_nanoseconds = 2;
  if (this->timeout_nanoseconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->timeout_nanoseconds(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.androidaudioplugin.ProcessRequest)
  return target;
}

size_t ProcessRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.androidaudioplugin.ProcessRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 instance_id = 1;
  if (this->instance_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->instance_id());
  }

  // int32 timeout_nanoseconds = 2;
  if (this->timeout_nanoseconds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->timeout_nanoseconds());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.androidaudioplugin.ProcessRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProcessRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.androidaudioplugin.ProcessRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.androidaudioplugin.ProcessRequest)
    MergeFrom(*source);
  }
}

void ProcessRequest::MergeFrom(const ProcessRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.androidaudioplugin.ProcessRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.instance_id() != 0) {
    set_instance_id(from.instance_id());
  }
  if (from.timeout_nanoseconds() != 0) {
    set_timeout_nanoseconds(from.timeout_nanoseconds());
  }
}

void ProcessRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.androidaudioplugin.ProcessRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessRequest::CopyFrom(const ProcessRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.androidaudioplugin.ProcessRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessRequest::IsInitialized() const {
  return true;
}

void ProcessRequest::Swap(ProcessRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProcessRequest::InternalSwap(ProcessRequest* other) {
  using std::swap;
  swap(instance_id_, other->instance_id_);
  swap(timeout_nanoseconds_, other->timeout_nanoseconds_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ProcessRequest::GetMetadata() const {
  protobuf_AudioPluginService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AudioPluginService_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace androidaudioplugin
}  // namespace org
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::org::androidaudioplugin::Unit* Arena::CreateMaybeMessage< ::org::androidaudioplugin::Unit >(Arena* arena) {
  return Arena::CreateInternal< ::org::androidaudioplugin::Unit >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::org::androidaudioplugin::AliveStatus* Arena::CreateMaybeMessage< ::org::androidaudioplugin::AliveStatus >(Arena* arena) {
  return Arena::CreateInternal< ::org::androidaudioplugin::AliveStatus >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::org::androidaudioplugin::Size* Arena::CreateMaybeMessage< ::org::androidaudioplugin::Size >(Arena* arena) {
  return Arena::CreateInternal< ::org::androidaudioplugin::Size >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::org::androidaudioplugin::InstanceId* Arena::CreateMaybeMessage< ::org::androidaudioplugin::InstanceId >(Arena* arena) {
  return Arena::CreateInternal< ::org::androidaudioplugin::InstanceId >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::org::androidaudioplugin::CreateRequest* Arena::CreateMaybeMessage< ::org::androidaudioplugin::CreateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::org::androidaudioplugin::CreateRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::org::androidaudioplugin::Extension* Arena::CreateMaybeMessage< ::org::androidaudioplugin::Extension >(Arena* arena) {
  return Arena::CreateInternal< ::org::androidaudioplugin::Extension >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::org::androidaudioplugin::GetStateRequest* Arena::CreateMaybeMessage< ::org::androidaudioplugin::GetStateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::org::androidaudioplugin::GetStateRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::org::androidaudioplugin::SetStateRequest* Arena::CreateMaybeMessage< ::org::androidaudioplugin::SetStateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::org::androidaudioplugin::SetStateRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::org::androidaudioplugin::PrepareRequest* Arena::CreateMaybeMessage< ::org::androidaudioplugin::PrepareRequest >(Arena* arena) {
  return Arena::CreateInternal< ::org::androidaudioplugin::PrepareRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::org::androidaudioplugin::ProcessRequest* Arena::CreateMaybeMessage< ::org::androidaudioplugin::ProcessRequest >(Arena* arena) {
  return Arena::CreateInternal< ::org::androidaudioplugin::ProcessRequest >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
