// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: AudioPluginService.proto
#ifndef GRPC_AudioPluginService_2eproto__INCLUDED
#define GRPC_AudioPluginService_2eproto__INCLUDED

#include "AudioPluginService.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace org {
namespace androidaudioplugin {

class AudioPluginService final {
 public:
  static constexpr char const* service_full_name() {
    return "org.androidaudioplugin.AudioPluginService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Create(::grpc::ClientContext* context, const ::org::androidaudioplugin::CreateRequest& request, ::org::androidaudioplugin::InstanceId* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::androidaudioplugin::InstanceId>> AsyncCreate(::grpc::ClientContext* context, const ::org::androidaudioplugin::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::androidaudioplugin::InstanceId>>(AsyncCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::androidaudioplugin::InstanceId>> PrepareAsyncCreate(::grpc::ClientContext* context, const ::org::androidaudioplugin::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::androidaudioplugin::InstanceId>>(PrepareAsyncCreateRaw(context, request, cq));
    }
    virtual ::grpc::Status IsPluginAlive(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::org::androidaudioplugin::AliveStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::androidaudioplugin::AliveStatus>> AsyncIsPluginAlive(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::androidaudioplugin::AliveStatus>>(AsyncIsPluginAliveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::androidaudioplugin::AliveStatus>> PrepareAsyncIsPluginAlive(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::androidaudioplugin::AliveStatus>>(PrepareAsyncIsPluginAliveRaw(context, request, cq));
    }
    virtual ::grpc::Status GetStateSize(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::org::androidaudioplugin::Size* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::androidaudioplugin::Size>> AsyncGetStateSize(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::androidaudioplugin::Size>>(AsyncGetStateSizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::androidaudioplugin::Size>> PrepareAsyncGetStateSize(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::androidaudioplugin::Size>>(PrepareAsyncGetStateSizeRaw(context, request, cq));
    }
    virtual ::grpc::Status GetState(::grpc::ClientContext* context, const ::org::androidaudioplugin::GetStateRequest& request, ::org::androidaudioplugin::Unit* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::androidaudioplugin::Unit>> AsyncGetState(::grpc::ClientContext* context, const ::org::androidaudioplugin::GetStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::androidaudioplugin::Unit>>(AsyncGetStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::androidaudioplugin::Unit>> PrepareAsyncGetState(::grpc::ClientContext* context, const ::org::androidaudioplugin::GetStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::androidaudioplugin::Unit>>(PrepareAsyncGetStateRaw(context, request, cq));
    }
    virtual ::grpc::Status SetState(::grpc::ClientContext* context, const ::org::androidaudioplugin::SetStateRequest& request, ::org::androidaudioplugin::Unit* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::androidaudioplugin::Unit>> AsyncSetState(::grpc::ClientContext* context, const ::org::androidaudioplugin::SetStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::androidaudioplugin::Unit>>(AsyncSetStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::androidaudioplugin::Unit>> PrepareAsyncSetState(::grpc::ClientContext* context, const ::org::androidaudioplugin::SetStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::androidaudioplugin::Unit>>(PrepareAsyncSetStateRaw(context, request, cq));
    }
    virtual ::grpc::Status Prepare(::grpc::ClientContext* context, const ::org::androidaudioplugin::PrepareRequest& request, ::org::androidaudioplugin::Unit* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::androidaudioplugin::Unit>> AsyncPrepare(::grpc::ClientContext* context, const ::org::androidaudioplugin::PrepareRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::androidaudioplugin::Unit>>(AsyncPrepareRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::androidaudioplugin::Unit>> PrepareAsyncPrepare(::grpc::ClientContext* context, const ::org::androidaudioplugin::PrepareRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::androidaudioplugin::Unit>>(PrepareAsyncPrepareRaw(context, request, cq));
    }
    virtual ::grpc::Status Activate(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::org::androidaudioplugin::Unit* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::androidaudioplugin::Unit>> AsyncActivate(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::androidaudioplugin::Unit>>(AsyncActivateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::androidaudioplugin::Unit>> PrepareAsyncActivate(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::androidaudioplugin::Unit>>(PrepareAsyncActivateRaw(context, request, cq));
    }
    virtual ::grpc::Status Process(::grpc::ClientContext* context, const ::org::androidaudioplugin::ProcessRequest& request, ::org::androidaudioplugin::Unit* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::androidaudioplugin::Unit>> AsyncProcess(::grpc::ClientContext* context, const ::org::androidaudioplugin::ProcessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::androidaudioplugin::Unit>>(AsyncProcessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::androidaudioplugin::Unit>> PrepareAsyncProcess(::grpc::ClientContext* context, const ::org::androidaudioplugin::ProcessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::androidaudioplugin::Unit>>(PrepareAsyncProcessRaw(context, request, cq));
    }
    virtual ::grpc::Status Deactivate(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::org::androidaudioplugin::Unit* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::androidaudioplugin::Unit>> AsyncDeactivate(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::androidaudioplugin::Unit>>(AsyncDeactivateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::androidaudioplugin::Unit>> PrepareAsyncDeactivate(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::androidaudioplugin::Unit>>(PrepareAsyncDeactivateRaw(context, request, cq));
    }
    virtual ::grpc::Status Destroy(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::org::androidaudioplugin::Unit* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::androidaudioplugin::Unit>> AsyncDestroy(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::androidaudioplugin::Unit>>(AsyncDestroyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::androidaudioplugin::Unit>> PrepareAsyncDestroy(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::androidaudioplugin::Unit>>(PrepareAsyncDestroyRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Create(::grpc::ClientContext* context, const ::org::androidaudioplugin::CreateRequest* request, ::org::androidaudioplugin::InstanceId* response, std::function<void(::grpc::Status)>) = 0;
      virtual void IsPluginAlive(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId* request, ::org::androidaudioplugin::AliveStatus* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetStateSize(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId* request, ::org::androidaudioplugin::Size* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetState(::grpc::ClientContext* context, const ::org::androidaudioplugin::GetStateRequest* request, ::org::androidaudioplugin::Unit* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetState(::grpc::ClientContext* context, const ::org::androidaudioplugin::SetStateRequest* request, ::org::androidaudioplugin::Unit* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Prepare(::grpc::ClientContext* context, const ::org::androidaudioplugin::PrepareRequest* request, ::org::androidaudioplugin::Unit* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Activate(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId* request, ::org::androidaudioplugin::Unit* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Process(::grpc::ClientContext* context, const ::org::androidaudioplugin::ProcessRequest* request, ::org::androidaudioplugin::Unit* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Deactivate(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId* request, ::org::androidaudioplugin::Unit* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Destroy(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId* request, ::org::androidaudioplugin::Unit* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::org::androidaudioplugin::InstanceId>* AsyncCreateRaw(::grpc::ClientContext* context, const ::org::androidaudioplugin::CreateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::org::androidaudioplugin::InstanceId>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::org::androidaudioplugin::CreateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::org::androidaudioplugin::AliveStatus>* AsyncIsPluginAliveRaw(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::org::androidaudioplugin::AliveStatus>* PrepareAsyncIsPluginAliveRaw(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::org::androidaudioplugin::Size>* AsyncGetStateSizeRaw(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::org::androidaudioplugin::Size>* PrepareAsyncGetStateSizeRaw(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::org::androidaudioplugin::Unit>* AsyncGetStateRaw(::grpc::ClientContext* context, const ::org::androidaudioplugin::GetStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::org::androidaudioplugin::Unit>* PrepareAsyncGetStateRaw(::grpc::ClientContext* context, const ::org::androidaudioplugin::GetStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::org::androidaudioplugin::Unit>* AsyncSetStateRaw(::grpc::ClientContext* context, const ::org::androidaudioplugin::SetStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::org::androidaudioplugin::Unit>* PrepareAsyncSetStateRaw(::grpc::ClientContext* context, const ::org::androidaudioplugin::SetStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::org::androidaudioplugin::Unit>* AsyncPrepareRaw(::grpc::ClientContext* context, const ::org::androidaudioplugin::PrepareRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::org::androidaudioplugin::Unit>* PrepareAsyncPrepareRaw(::grpc::ClientContext* context, const ::org::androidaudioplugin::PrepareRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::org::androidaudioplugin::Unit>* AsyncActivateRaw(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::org::androidaudioplugin::Unit>* PrepareAsyncActivateRaw(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::org::androidaudioplugin::Unit>* AsyncProcessRaw(::grpc::ClientContext* context, const ::org::androidaudioplugin::ProcessRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::org::androidaudioplugin::Unit>* PrepareAsyncProcessRaw(::grpc::ClientContext* context, const ::org::androidaudioplugin::ProcessRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::org::androidaudioplugin::Unit>* AsyncDeactivateRaw(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::org::androidaudioplugin::Unit>* PrepareAsyncDeactivateRaw(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::org::androidaudioplugin::Unit>* AsyncDestroyRaw(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::org::androidaudioplugin::Unit>* PrepareAsyncDestroyRaw(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Create(::grpc::ClientContext* context, const ::org::androidaudioplugin::CreateRequest& request, ::org::androidaudioplugin::InstanceId* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::InstanceId>> AsyncCreate(::grpc::ClientContext* context, const ::org::androidaudioplugin::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::InstanceId>>(AsyncCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::InstanceId>> PrepareAsyncCreate(::grpc::ClientContext* context, const ::org::androidaudioplugin::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::InstanceId>>(PrepareAsyncCreateRaw(context, request, cq));
    }
    ::grpc::Status IsPluginAlive(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::org::androidaudioplugin::AliveStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::AliveStatus>> AsyncIsPluginAlive(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::AliveStatus>>(AsyncIsPluginAliveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::AliveStatus>> PrepareAsyncIsPluginAlive(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::AliveStatus>>(PrepareAsyncIsPluginAliveRaw(context, request, cq));
    }
    ::grpc::Status GetStateSize(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::org::androidaudioplugin::Size* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Size>> AsyncGetStateSize(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Size>>(AsyncGetStateSizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Size>> PrepareAsyncGetStateSize(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Size>>(PrepareAsyncGetStateSizeRaw(context, request, cq));
    }
    ::grpc::Status GetState(::grpc::ClientContext* context, const ::org::androidaudioplugin::GetStateRequest& request, ::org::androidaudioplugin::Unit* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Unit>> AsyncGetState(::grpc::ClientContext* context, const ::org::androidaudioplugin::GetStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Unit>>(AsyncGetStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Unit>> PrepareAsyncGetState(::grpc::ClientContext* context, const ::org::androidaudioplugin::GetStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Unit>>(PrepareAsyncGetStateRaw(context, request, cq));
    }
    ::grpc::Status SetState(::grpc::ClientContext* context, const ::org::androidaudioplugin::SetStateRequest& request, ::org::androidaudioplugin::Unit* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Unit>> AsyncSetState(::grpc::ClientContext* context, const ::org::androidaudioplugin::SetStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Unit>>(AsyncSetStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Unit>> PrepareAsyncSetState(::grpc::ClientContext* context, const ::org::androidaudioplugin::SetStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Unit>>(PrepareAsyncSetStateRaw(context, request, cq));
    }
    ::grpc::Status Prepare(::grpc::ClientContext* context, const ::org::androidaudioplugin::PrepareRequest& request, ::org::androidaudioplugin::Unit* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Unit>> AsyncPrepare(::grpc::ClientContext* context, const ::org::androidaudioplugin::PrepareRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Unit>>(AsyncPrepareRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Unit>> PrepareAsyncPrepare(::grpc::ClientContext* context, const ::org::androidaudioplugin::PrepareRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Unit>>(PrepareAsyncPrepareRaw(context, request, cq));
    }
    ::grpc::Status Activate(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::org::androidaudioplugin::Unit* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Unit>> AsyncActivate(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Unit>>(AsyncActivateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Unit>> PrepareAsyncActivate(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Unit>>(PrepareAsyncActivateRaw(context, request, cq));
    }
    ::grpc::Status Process(::grpc::ClientContext* context, const ::org::androidaudioplugin::ProcessRequest& request, ::org::androidaudioplugin::Unit* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Unit>> AsyncProcess(::grpc::ClientContext* context, const ::org::androidaudioplugin::ProcessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Unit>>(AsyncProcessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Unit>> PrepareAsyncProcess(::grpc::ClientContext* context, const ::org::androidaudioplugin::ProcessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Unit>>(PrepareAsyncProcessRaw(context, request, cq));
    }
    ::grpc::Status Deactivate(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::org::androidaudioplugin::Unit* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Unit>> AsyncDeactivate(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Unit>>(AsyncDeactivateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Unit>> PrepareAsyncDeactivate(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Unit>>(PrepareAsyncDeactivateRaw(context, request, cq));
    }
    ::grpc::Status Destroy(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::org::androidaudioplugin::Unit* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Unit>> AsyncDestroy(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Unit>>(AsyncDestroyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Unit>> PrepareAsyncDestroy(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Unit>>(PrepareAsyncDestroyRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Create(::grpc::ClientContext* context, const ::org::androidaudioplugin::CreateRequest* request, ::org::androidaudioplugin::InstanceId* response, std::function<void(::grpc::Status)>) override;
      void IsPluginAlive(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId* request, ::org::androidaudioplugin::AliveStatus* response, std::function<void(::grpc::Status)>) override;
      void GetStateSize(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId* request, ::org::androidaudioplugin::Size* response, std::function<void(::grpc::Status)>) override;
      void GetState(::grpc::ClientContext* context, const ::org::androidaudioplugin::GetStateRequest* request, ::org::androidaudioplugin::Unit* response, std::function<void(::grpc::Status)>) override;
      void SetState(::grpc::ClientContext* context, const ::org::androidaudioplugin::SetStateRequest* request, ::org::androidaudioplugin::Unit* response, std::function<void(::grpc::Status)>) override;
      void Prepare(::grpc::ClientContext* context, const ::org::androidaudioplugin::PrepareRequest* request, ::org::androidaudioplugin::Unit* response, std::function<void(::grpc::Status)>) override;
      void Activate(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId* request, ::org::androidaudioplugin::Unit* response, std::function<void(::grpc::Status)>) override;
      void Process(::grpc::ClientContext* context, const ::org::androidaudioplugin::ProcessRequest* request, ::org::androidaudioplugin::Unit* response, std::function<void(::grpc::Status)>) override;
      void Deactivate(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId* request, ::org::androidaudioplugin::Unit* response, std::function<void(::grpc::Status)>) override;
      void Destroy(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId* request, ::org::androidaudioplugin::Unit* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::InstanceId>* AsyncCreateRaw(::grpc::ClientContext* context, const ::org::androidaudioplugin::CreateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::InstanceId>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::org::androidaudioplugin::CreateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::AliveStatus>* AsyncIsPluginAliveRaw(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::AliveStatus>* PrepareAsyncIsPluginAliveRaw(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Size>* AsyncGetStateSizeRaw(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Size>* PrepareAsyncGetStateSizeRaw(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Unit>* AsyncGetStateRaw(::grpc::ClientContext* context, const ::org::androidaudioplugin::GetStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Unit>* PrepareAsyncGetStateRaw(::grpc::ClientContext* context, const ::org::androidaudioplugin::GetStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Unit>* AsyncSetStateRaw(::grpc::ClientContext* context, const ::org::androidaudioplugin::SetStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Unit>* PrepareAsyncSetStateRaw(::grpc::ClientContext* context, const ::org::androidaudioplugin::SetStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Unit>* AsyncPrepareRaw(::grpc::ClientContext* context, const ::org::androidaudioplugin::PrepareRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Unit>* PrepareAsyncPrepareRaw(::grpc::ClientContext* context, const ::org::androidaudioplugin::PrepareRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Unit>* AsyncActivateRaw(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Unit>* PrepareAsyncActivateRaw(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Unit>* AsyncProcessRaw(::grpc::ClientContext* context, const ::org::androidaudioplugin::ProcessRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Unit>* PrepareAsyncProcessRaw(::grpc::ClientContext* context, const ::org::androidaudioplugin::ProcessRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Unit>* AsyncDeactivateRaw(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Unit>* PrepareAsyncDeactivateRaw(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Unit>* AsyncDestroyRaw(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Unit>* PrepareAsyncDestroyRaw(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Create_;
    const ::grpc::internal::RpcMethod rpcmethod_IsPluginAlive_;
    const ::grpc::internal::RpcMethod rpcmethod_GetStateSize_;
    const ::grpc::internal::RpcMethod rpcmethod_GetState_;
    const ::grpc::internal::RpcMethod rpcmethod_SetState_;
    const ::grpc::internal::RpcMethod rpcmethod_Prepare_;
    const ::grpc::internal::RpcMethod rpcmethod_Activate_;
    const ::grpc::internal::RpcMethod rpcmethod_Process_;
    const ::grpc::internal::RpcMethod rpcmethod_Deactivate_;
    const ::grpc::internal::RpcMethod rpcmethod_Destroy_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Create(::grpc::ServerContext* context, const ::org::androidaudioplugin::CreateRequest* request, ::org::androidaudioplugin::InstanceId* response);
    virtual ::grpc::Status IsPluginAlive(::grpc::ServerContext* context, const ::org::androidaudioplugin::InstanceId* request, ::org::androidaudioplugin::AliveStatus* response);
    virtual ::grpc::Status GetStateSize(::grpc::ServerContext* context, const ::org::androidaudioplugin::InstanceId* request, ::org::androidaudioplugin::Size* response);
    virtual ::grpc::Status GetState(::grpc::ServerContext* context, const ::org::androidaudioplugin::GetStateRequest* request, ::org::androidaudioplugin::Unit* response);
    virtual ::grpc::Status SetState(::grpc::ServerContext* context, const ::org::androidaudioplugin::SetStateRequest* request, ::org::androidaudioplugin::Unit* response);
    virtual ::grpc::Status Prepare(::grpc::ServerContext* context, const ::org::androidaudioplugin::PrepareRequest* request, ::org::androidaudioplugin::Unit* response);
    virtual ::grpc::Status Activate(::grpc::ServerContext* context, const ::org::androidaudioplugin::InstanceId* request, ::org::androidaudioplugin::Unit* response);
    virtual ::grpc::Status Process(::grpc::ServerContext* context, const ::org::androidaudioplugin::ProcessRequest* request, ::org::androidaudioplugin::Unit* response);
    virtual ::grpc::Status Deactivate(::grpc::ServerContext* context, const ::org::androidaudioplugin::InstanceId* request, ::org::androidaudioplugin::Unit* response);
    virtual ::grpc::Status Destroy(::grpc::ServerContext* context, const ::org::androidaudioplugin::InstanceId* request, ::org::androidaudioplugin::Unit* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Create() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* context, const ::org::androidaudioplugin::CreateRequest* request, ::org::androidaudioplugin::InstanceId* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::org::androidaudioplugin::CreateRequest* request, ::grpc::ServerAsyncResponseWriter< ::org::androidaudioplugin::InstanceId>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_IsPluginAlive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_IsPluginAlive() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_IsPluginAlive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsPluginAlive(::grpc::ServerContext* context, const ::org::androidaudioplugin::InstanceId* request, ::org::androidaudioplugin::AliveStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsPluginAlive(::grpc::ServerContext* context, ::org::androidaudioplugin::InstanceId* request, ::grpc::ServerAsyncResponseWriter< ::org::androidaudioplugin::AliveStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetStateSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetStateSize() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetStateSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStateSize(::grpc::ServerContext* context, const ::org::androidaudioplugin::InstanceId* request, ::org::androidaudioplugin::Size* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStateSize(::grpc::ServerContext* context, ::org::androidaudioplugin::InstanceId* request, ::grpc::ServerAsyncResponseWriter< ::org::androidaudioplugin::Size>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetState() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetState(::grpc::ServerContext* context, const ::org::androidaudioplugin::GetStateRequest* request, ::org::androidaudioplugin::Unit* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetState(::grpc::ServerContext* context, ::org::androidaudioplugin::GetStateRequest* request, ::grpc::ServerAsyncResponseWriter< ::org::androidaudioplugin::Unit>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetState() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_SetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetState(::grpc::ServerContext* context, const ::org::androidaudioplugin::SetStateRequest* request, ::org::androidaudioplugin::Unit* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetState(::grpc::ServerContext* context, ::org::androidaudioplugin::SetStateRequest* request, ::grpc::ServerAsyncResponseWriter< ::org::androidaudioplugin::Unit>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Prepare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Prepare() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_Prepare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Prepare(::grpc::ServerContext* context, const ::org::androidaudioplugin::PrepareRequest* request, ::org::androidaudioplugin::Unit* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPrepare(::grpc::ServerContext* context, ::org::androidaudioplugin::PrepareRequest* request, ::grpc::ServerAsyncResponseWriter< ::org::androidaudioplugin::Unit>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Activate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Activate() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_Activate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Activate(::grpc::ServerContext* context, const ::org::androidaudioplugin::InstanceId* request, ::org::androidaudioplugin::Unit* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestActivate(::grpc::ServerContext* context, ::org::androidaudioplugin::InstanceId* request, ::grpc::ServerAsyncResponseWriter< ::org::androidaudioplugin::Unit>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Process : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Process() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_Process() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Process(::grpc::ServerContext* context, const ::org::androidaudioplugin::ProcessRequest* request, ::org::androidaudioplugin::Unit* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProcess(::grpc::ServerContext* context, ::org::androidaudioplugin::ProcessRequest* request, ::grpc::ServerAsyncResponseWriter< ::org::androidaudioplugin::Unit>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Deactivate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Deactivate() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_Deactivate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Deactivate(::grpc::ServerContext* context, const ::org::androidaudioplugin::InstanceId* request, ::org::androidaudioplugin::Unit* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeactivate(::grpc::ServerContext* context, ::org::androidaudioplugin::InstanceId* request, ::grpc::ServerAsyncResponseWriter< ::org::androidaudioplugin::Unit>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Destroy() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_Destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Destroy(::grpc::ServerContext* context, const ::org::androidaudioplugin::InstanceId* request, ::org::androidaudioplugin::Unit* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDestroy(::grpc::ServerContext* context, ::org::androidaudioplugin::InstanceId* request, ::grpc::ServerAsyncResponseWriter< ::org::androidaudioplugin::Unit>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Create<WithAsyncMethod_IsPluginAlive<WithAsyncMethod_GetStateSize<WithAsyncMethod_GetState<WithAsyncMethod_SetState<WithAsyncMethod_Prepare<WithAsyncMethod_Activate<WithAsyncMethod_Process<WithAsyncMethod_Deactivate<WithAsyncMethod_Destroy<Service > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Create() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* context, const ::org::androidaudioplugin::CreateRequest* request, ::org::androidaudioplugin::InstanceId* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_IsPluginAlive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_IsPluginAlive() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_IsPluginAlive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsPluginAlive(::grpc::ServerContext* context, const ::org::androidaudioplugin::InstanceId* request, ::org::androidaudioplugin::AliveStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetStateSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetStateSize() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetStateSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStateSize(::grpc::ServerContext* context, const ::org::androidaudioplugin::InstanceId* request, ::org::androidaudioplugin::Size* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetState() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetState(::grpc::ServerContext* context, const ::org::androidaudioplugin::GetStateRequest* request, ::org::androidaudioplugin::Unit* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetState() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_SetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetState(::grpc::ServerContext* context, const ::org::androidaudioplugin::SetStateRequest* request, ::org::androidaudioplugin::Unit* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Prepare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Prepare() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_Prepare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Prepare(::grpc::ServerContext* context, const ::org::androidaudioplugin::PrepareRequest* request, ::org::androidaudioplugin::Unit* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Activate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Activate() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_Activate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Activate(::grpc::ServerContext* context, const ::org::androidaudioplugin::InstanceId* request, ::org::androidaudioplugin::Unit* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Process : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Process() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_Process() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Process(::grpc::ServerContext* context, const ::org::androidaudioplugin::ProcessRequest* request, ::org::androidaudioplugin::Unit* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Deactivate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Deactivate() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_Deactivate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Deactivate(::grpc::ServerContext* context, const ::org::androidaudioplugin::InstanceId* request, ::org::androidaudioplugin::Unit* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Destroy() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_Destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Destroy(::grpc::ServerContext* context, const ::org::androidaudioplugin::InstanceId* request, ::org::androidaudioplugin::Unit* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Create() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* context, const ::org::androidaudioplugin::CreateRequest* request, ::org::androidaudioplugin::InstanceId* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_IsPluginAlive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_IsPluginAlive() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_IsPluginAlive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsPluginAlive(::grpc::ServerContext* context, const ::org::androidaudioplugin::InstanceId* request, ::org::androidaudioplugin::AliveStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsPluginAlive(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetStateSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetStateSize() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetStateSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStateSize(::grpc::ServerContext* context, const ::org::androidaudioplugin::InstanceId* request, ::org::androidaudioplugin::Size* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStateSize(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetState() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetState(::grpc::ServerContext* context, const ::org::androidaudioplugin::GetStateRequest* request, ::org::androidaudioplugin::Unit* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SetState() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_SetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetState(::grpc::ServerContext* context, const ::org::androidaudioplugin::SetStateRequest* request, ::org::androidaudioplugin::Unit* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Prepare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Prepare() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_Prepare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Prepare(::grpc::ServerContext* context, const ::org::androidaudioplugin::PrepareRequest* request, ::org::androidaudioplugin::Unit* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPrepare(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Activate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Activate() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_Activate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Activate(::grpc::ServerContext* context, const ::org::androidaudioplugin::InstanceId* request, ::org::androidaudioplugin::Unit* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestActivate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Process : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Process() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_Process() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Process(::grpc::ServerContext* context, const ::org::androidaudioplugin::ProcessRequest* request, ::org::androidaudioplugin::Unit* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProcess(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Deactivate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Deactivate() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_Deactivate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Deactivate(::grpc::ServerContext* context, const ::org::androidaudioplugin::InstanceId* request, ::org::androidaudioplugin::Unit* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeactivate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Destroy() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_Destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Destroy(::grpc::ServerContext* context, const ::org::androidaudioplugin::InstanceId* request, ::org::androidaudioplugin::Unit* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDestroy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Create() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::org::androidaudioplugin::CreateRequest, ::org::androidaudioplugin::InstanceId>(std::bind(&WithStreamedUnaryMethod_Create<BaseClass>::StreamedCreate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Create(::grpc::ServerContext* context, const ::org::androidaudioplugin::CreateRequest* request, ::org::androidaudioplugin::InstanceId* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::org::androidaudioplugin::CreateRequest,::org::androidaudioplugin::InstanceId>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_IsPluginAlive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_IsPluginAlive() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::org::androidaudioplugin::InstanceId, ::org::androidaudioplugin::AliveStatus>(std::bind(&WithStreamedUnaryMethod_IsPluginAlive<BaseClass>::StreamedIsPluginAlive, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_IsPluginAlive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status IsPluginAlive(::grpc::ServerContext* context, const ::org::androidaudioplugin::InstanceId* request, ::org::androidaudioplugin::AliveStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedIsPluginAlive(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::org::androidaudioplugin::InstanceId,::org::androidaudioplugin::AliveStatus>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetStateSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetStateSize() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::org::androidaudioplugin::InstanceId, ::org::androidaudioplugin::Size>(std::bind(&WithStreamedUnaryMethod_GetStateSize<BaseClass>::StreamedGetStateSize, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetStateSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetStateSize(::grpc::ServerContext* context, const ::org::androidaudioplugin::InstanceId* request, ::org::androidaudioplugin::Size* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetStateSize(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::org::androidaudioplugin::InstanceId,::org::androidaudioplugin::Size>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetState() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::org::androidaudioplugin::GetStateRequest, ::org::androidaudioplugin::Unit>(std::bind(&WithStreamedUnaryMethod_GetState<BaseClass>::StreamedGetState, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetState(::grpc::ServerContext* context, const ::org::androidaudioplugin::GetStateRequest* request, ::org::androidaudioplugin::Unit* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::org::androidaudioplugin::GetStateRequest,::org::androidaudioplugin::Unit>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetState() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::org::androidaudioplugin::SetStateRequest, ::org::androidaudioplugin::Unit>(std::bind(&WithStreamedUnaryMethod_SetState<BaseClass>::StreamedSetState, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetState(::grpc::ServerContext* context, const ::org::androidaudioplugin::SetStateRequest* request, ::org::androidaudioplugin::Unit* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::org::androidaudioplugin::SetStateRequest,::org::androidaudioplugin::Unit>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Prepare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Prepare() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::org::androidaudioplugin::PrepareRequest, ::org::androidaudioplugin::Unit>(std::bind(&WithStreamedUnaryMethod_Prepare<BaseClass>::StreamedPrepare, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Prepare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Prepare(::grpc::ServerContext* context, const ::org::androidaudioplugin::PrepareRequest* request, ::org::androidaudioplugin::Unit* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPrepare(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::org::androidaudioplugin::PrepareRequest,::org::androidaudioplugin::Unit>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Activate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Activate() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::org::androidaudioplugin::InstanceId, ::org::androidaudioplugin::Unit>(std::bind(&WithStreamedUnaryMethod_Activate<BaseClass>::StreamedActivate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Activate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Activate(::grpc::ServerContext* context, const ::org::androidaudioplugin::InstanceId* request, ::org::androidaudioplugin::Unit* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedActivate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::org::androidaudioplugin::InstanceId,::org::androidaudioplugin::Unit>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Process : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Process() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::org::androidaudioplugin::ProcessRequest, ::org::androidaudioplugin::Unit>(std::bind(&WithStreamedUnaryMethod_Process<BaseClass>::StreamedProcess, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Process() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Process(::grpc::ServerContext* context, const ::org::androidaudioplugin::ProcessRequest* request, ::org::androidaudioplugin::Unit* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedProcess(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::org::androidaudioplugin::ProcessRequest,::org::androidaudioplugin::Unit>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Deactivate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Deactivate() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::org::androidaudioplugin::InstanceId, ::org::androidaudioplugin::Unit>(std::bind(&WithStreamedUnaryMethod_Deactivate<BaseClass>::StreamedDeactivate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Deactivate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Deactivate(::grpc::ServerContext* context, const ::org::androidaudioplugin::InstanceId* request, ::org::androidaudioplugin::Unit* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeactivate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::org::androidaudioplugin::InstanceId,::org::androidaudioplugin::Unit>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Destroy() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::org::androidaudioplugin::InstanceId, ::org::androidaudioplugin::Unit>(std::bind(&WithStreamedUnaryMethod_Destroy<BaseClass>::StreamedDestroy, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Destroy(::grpc::ServerContext* context, const ::org::androidaudioplugin::InstanceId* request, ::org::androidaudioplugin::Unit* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDestroy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::org::androidaudioplugin::InstanceId,::org::androidaudioplugin::Unit>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Create<WithStreamedUnaryMethod_IsPluginAlive<WithStreamedUnaryMethod_GetStateSize<WithStreamedUnaryMethod_GetState<WithStreamedUnaryMethod_SetState<WithStreamedUnaryMethod_Prepare<WithStreamedUnaryMethod_Activate<WithStreamedUnaryMethod_Process<WithStreamedUnaryMethod_Deactivate<WithStreamedUnaryMethod_Destroy<Service > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Create<WithStreamedUnaryMethod_IsPluginAlive<WithStreamedUnaryMethod_GetStateSize<WithStreamedUnaryMethod_GetState<WithStreamedUnaryMethod_SetState<WithStreamedUnaryMethod_Prepare<WithStreamedUnaryMethod_Activate<WithStreamedUnaryMethod_Process<WithStreamedUnaryMethod_Deactivate<WithStreamedUnaryMethod_Destroy<Service > > > > > > > > > > StreamedService;
};

}  // namespace androidaudioplugin
}  // namespace org


#endif  // GRPC_AudioPluginService_2eproto__INCLUDED
