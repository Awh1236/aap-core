// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: AudioPluginService.proto

#include "AudioPluginService.pb.h"
#include "AudioPluginService.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace org {
namespace androidaudioplugin {

static const char* AudioPluginService_method_names[] = {
  "/org.androidaudioplugin.AudioPluginService/Create",
  "/org.androidaudioplugin.AudioPluginService/IsPluginAlive",
  "/org.androidaudioplugin.AudioPluginService/GetStateSize",
  "/org.androidaudioplugin.AudioPluginService/GetState",
  "/org.androidaudioplugin.AudioPluginService/SetState",
  "/org.androidaudioplugin.AudioPluginService/Prepare",
  "/org.androidaudioplugin.AudioPluginService/Activate",
  "/org.androidaudioplugin.AudioPluginService/Process",
  "/org.androidaudioplugin.AudioPluginService/Deactivate",
  "/org.androidaudioplugin.AudioPluginService/Destroy",
};

std::unique_ptr< AudioPluginService::Stub> AudioPluginService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AudioPluginService::Stub> stub(new AudioPluginService::Stub(channel));
  return stub;
}

AudioPluginService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Create_(AudioPluginService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IsPluginAlive_(AudioPluginService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetStateSize_(AudioPluginService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetState_(AudioPluginService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetState_(AudioPluginService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Prepare_(AudioPluginService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Activate_(AudioPluginService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Process_(AudioPluginService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Deactivate_(AudioPluginService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Destroy_(AudioPluginService_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status AudioPluginService::Stub::Create(::grpc::ClientContext* context, const ::org::androidaudioplugin::CreateRequest& request, ::org::androidaudioplugin::InstanceId* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Create_, context, request, response);
}

void AudioPluginService::Stub::experimental_async::Create(::grpc::ClientContext* context, const ::org::androidaudioplugin::CreateRequest* request, ::org::androidaudioplugin::InstanceId* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::InstanceId>* AudioPluginService::Stub::AsyncCreateRaw(::grpc::ClientContext* context, const ::org::androidaudioplugin::CreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::org::androidaudioplugin::InstanceId>::Create(channel_.get(), cq, rpcmethod_Create_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::InstanceId>* AudioPluginService::Stub::PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::org::androidaudioplugin::CreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::org::androidaudioplugin::InstanceId>::Create(channel_.get(), cq, rpcmethod_Create_, context, request, false);
}

::grpc::Status AudioPluginService::Stub::IsPluginAlive(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::org::androidaudioplugin::AliveStatus* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_IsPluginAlive_, context, request, response);
}

void AudioPluginService::Stub::experimental_async::IsPluginAlive(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId* request, ::org::androidaudioplugin::AliveStatus* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_IsPluginAlive_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::AliveStatus>* AudioPluginService::Stub::AsyncIsPluginAliveRaw(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::org::androidaudioplugin::AliveStatus>::Create(channel_.get(), cq, rpcmethod_IsPluginAlive_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::AliveStatus>* AudioPluginService::Stub::PrepareAsyncIsPluginAliveRaw(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::org::androidaudioplugin::AliveStatus>::Create(channel_.get(), cq, rpcmethod_IsPluginAlive_, context, request, false);
}

::grpc::Status AudioPluginService::Stub::GetStateSize(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::org::androidaudioplugin::Size* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetStateSize_, context, request, response);
}

void AudioPluginService::Stub::experimental_async::GetStateSize(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId* request, ::org::androidaudioplugin::Size* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetStateSize_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Size>* AudioPluginService::Stub::AsyncGetStateSizeRaw(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::org::androidaudioplugin::Size>::Create(channel_.get(), cq, rpcmethod_GetStateSize_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Size>* AudioPluginService::Stub::PrepareAsyncGetStateSizeRaw(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::org::androidaudioplugin::Size>::Create(channel_.get(), cq, rpcmethod_GetStateSize_, context, request, false);
}

::grpc::Status AudioPluginService::Stub::GetState(::grpc::ClientContext* context, const ::org::androidaudioplugin::GetStateRequest& request, ::org::androidaudioplugin::Unit* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetState_, context, request, response);
}

void AudioPluginService::Stub::experimental_async::GetState(::grpc::ClientContext* context, const ::org::androidaudioplugin::GetStateRequest* request, ::org::androidaudioplugin::Unit* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetState_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Unit>* AudioPluginService::Stub::AsyncGetStateRaw(::grpc::ClientContext* context, const ::org::androidaudioplugin::GetStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::org::androidaudioplugin::Unit>::Create(channel_.get(), cq, rpcmethod_GetState_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Unit>* AudioPluginService::Stub::PrepareAsyncGetStateRaw(::grpc::ClientContext* context, const ::org::androidaudioplugin::GetStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::org::androidaudioplugin::Unit>::Create(channel_.get(), cq, rpcmethod_GetState_, context, request, false);
}

::grpc::Status AudioPluginService::Stub::SetState(::grpc::ClientContext* context, const ::org::androidaudioplugin::SetStateRequest& request, ::org::androidaudioplugin::Unit* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetState_, context, request, response);
}

void AudioPluginService::Stub::experimental_async::SetState(::grpc::ClientContext* context, const ::org::androidaudioplugin::SetStateRequest* request, ::org::androidaudioplugin::Unit* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetState_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Unit>* AudioPluginService::Stub::AsyncSetStateRaw(::grpc::ClientContext* context, const ::org::androidaudioplugin::SetStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::org::androidaudioplugin::Unit>::Create(channel_.get(), cq, rpcmethod_SetState_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Unit>* AudioPluginService::Stub::PrepareAsyncSetStateRaw(::grpc::ClientContext* context, const ::org::androidaudioplugin::SetStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::org::androidaudioplugin::Unit>::Create(channel_.get(), cq, rpcmethod_SetState_, context, request, false);
}

::grpc::Status AudioPluginService::Stub::Prepare(::grpc::ClientContext* context, const ::org::androidaudioplugin::PrepareRequest& request, ::org::androidaudioplugin::Unit* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Prepare_, context, request, response);
}

void AudioPluginService::Stub::experimental_async::Prepare(::grpc::ClientContext* context, const ::org::androidaudioplugin::PrepareRequest* request, ::org::androidaudioplugin::Unit* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Prepare_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Unit>* AudioPluginService::Stub::AsyncPrepareRaw(::grpc::ClientContext* context, const ::org::androidaudioplugin::PrepareRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::org::androidaudioplugin::Unit>::Create(channel_.get(), cq, rpcmethod_Prepare_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Unit>* AudioPluginService::Stub::PrepareAsyncPrepareRaw(::grpc::ClientContext* context, const ::org::androidaudioplugin::PrepareRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::org::androidaudioplugin::Unit>::Create(channel_.get(), cq, rpcmethod_Prepare_, context, request, false);
}

::grpc::Status AudioPluginService::Stub::Activate(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::org::androidaudioplugin::Unit* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Activate_, context, request, response);
}

void AudioPluginService::Stub::experimental_async::Activate(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId* request, ::org::androidaudioplugin::Unit* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Activate_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Unit>* AudioPluginService::Stub::AsyncActivateRaw(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::org::androidaudioplugin::Unit>::Create(channel_.get(), cq, rpcmethod_Activate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Unit>* AudioPluginService::Stub::PrepareAsyncActivateRaw(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::org::androidaudioplugin::Unit>::Create(channel_.get(), cq, rpcmethod_Activate_, context, request, false);
}

::grpc::Status AudioPluginService::Stub::Process(::grpc::ClientContext* context, const ::org::androidaudioplugin::ProcessRequest& request, ::org::androidaudioplugin::Unit* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Process_, context, request, response);
}

void AudioPluginService::Stub::experimental_async::Process(::grpc::ClientContext* context, const ::org::androidaudioplugin::ProcessRequest* request, ::org::androidaudioplugin::Unit* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Process_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Unit>* AudioPluginService::Stub::AsyncProcessRaw(::grpc::ClientContext* context, const ::org::androidaudioplugin::ProcessRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::org::androidaudioplugin::Unit>::Create(channel_.get(), cq, rpcmethod_Process_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Unit>* AudioPluginService::Stub::PrepareAsyncProcessRaw(::grpc::ClientContext* context, const ::org::androidaudioplugin::ProcessRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::org::androidaudioplugin::Unit>::Create(channel_.get(), cq, rpcmethod_Process_, context, request, false);
}

::grpc::Status AudioPluginService::Stub::Deactivate(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::org::androidaudioplugin::Unit* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Deactivate_, context, request, response);
}

void AudioPluginService::Stub::experimental_async::Deactivate(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId* request, ::org::androidaudioplugin::Unit* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Deactivate_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Unit>* AudioPluginService::Stub::AsyncDeactivateRaw(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::org::androidaudioplugin::Unit>::Create(channel_.get(), cq, rpcmethod_Deactivate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Unit>* AudioPluginService::Stub::PrepareAsyncDeactivateRaw(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::org::androidaudioplugin::Unit>::Create(channel_.get(), cq, rpcmethod_Deactivate_, context, request, false);
}

::grpc::Status AudioPluginService::Stub::Destroy(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::org::androidaudioplugin::Unit* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Destroy_, context, request, response);
}

void AudioPluginService::Stub::experimental_async::Destroy(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId* request, ::org::androidaudioplugin::Unit* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Destroy_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Unit>* AudioPluginService::Stub::AsyncDestroyRaw(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::org::androidaudioplugin::Unit>::Create(channel_.get(), cq, rpcmethod_Destroy_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::org::androidaudioplugin::Unit>* AudioPluginService::Stub::PrepareAsyncDestroyRaw(::grpc::ClientContext* context, const ::org::androidaudioplugin::InstanceId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::org::androidaudioplugin::Unit>::Create(channel_.get(), cq, rpcmethod_Destroy_, context, request, false);
}

AudioPluginService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AudioPluginService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AudioPluginService::Service, ::org::androidaudioplugin::CreateRequest, ::org::androidaudioplugin::InstanceId>(
          std::mem_fn(&AudioPluginService::Service::Create), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AudioPluginService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AudioPluginService::Service, ::org::androidaudioplugin::InstanceId, ::org::androidaudioplugin::AliveStatus>(
          std::mem_fn(&AudioPluginService::Service::IsPluginAlive), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AudioPluginService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AudioPluginService::Service, ::org::androidaudioplugin::InstanceId, ::org::androidaudioplugin::Size>(
          std::mem_fn(&AudioPluginService::Service::GetStateSize), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AudioPluginService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AudioPluginService::Service, ::org::androidaudioplugin::GetStateRequest, ::org::androidaudioplugin::Unit>(
          std::mem_fn(&AudioPluginService::Service::GetState), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AudioPluginService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AudioPluginService::Service, ::org::androidaudioplugin::SetStateRequest, ::org::androidaudioplugin::Unit>(
          std::mem_fn(&AudioPluginService::Service::SetState), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AudioPluginService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AudioPluginService::Service, ::org::androidaudioplugin::PrepareRequest, ::org::androidaudioplugin::Unit>(
          std::mem_fn(&AudioPluginService::Service::Prepare), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AudioPluginService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AudioPluginService::Service, ::org::androidaudioplugin::InstanceId, ::org::androidaudioplugin::Unit>(
          std::mem_fn(&AudioPluginService::Service::Activate), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AudioPluginService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AudioPluginService::Service, ::org::androidaudioplugin::ProcessRequest, ::org::androidaudioplugin::Unit>(
          std::mem_fn(&AudioPluginService::Service::Process), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AudioPluginService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AudioPluginService::Service, ::org::androidaudioplugin::InstanceId, ::org::androidaudioplugin::Unit>(
          std::mem_fn(&AudioPluginService::Service::Deactivate), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AudioPluginService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AudioPluginService::Service, ::org::androidaudioplugin::InstanceId, ::org::androidaudioplugin::Unit>(
          std::mem_fn(&AudioPluginService::Service::Destroy), this)));
}

AudioPluginService::Service::~Service() {
}

::grpc::Status AudioPluginService::Service::Create(::grpc::ServerContext* context, const ::org::androidaudioplugin::CreateRequest* request, ::org::androidaudioplugin::InstanceId* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AudioPluginService::Service::IsPluginAlive(::grpc::ServerContext* context, const ::org::androidaudioplugin::InstanceId* request, ::org::androidaudioplugin::AliveStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AudioPluginService::Service::GetStateSize(::grpc::ServerContext* context, const ::org::androidaudioplugin::InstanceId* request, ::org::androidaudioplugin::Size* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AudioPluginService::Service::GetState(::grpc::ServerContext* context, const ::org::androidaudioplugin::GetStateRequest* request, ::org::androidaudioplugin::Unit* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AudioPluginService::Service::SetState(::grpc::ServerContext* context, const ::org::androidaudioplugin::SetStateRequest* request, ::org::androidaudioplugin::Unit* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AudioPluginService::Service::Prepare(::grpc::ServerContext* context, const ::org::androidaudioplugin::PrepareRequest* request, ::org::androidaudioplugin::Unit* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AudioPluginService::Service::Activate(::grpc::ServerContext* context, const ::org::androidaudioplugin::InstanceId* request, ::org::androidaudioplugin::Unit* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AudioPluginService::Service::Process(::grpc::ServerContext* context, const ::org::androidaudioplugin::ProcessRequest* request, ::org::androidaudioplugin::Unit* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AudioPluginService::Service::Deactivate(::grpc::ServerContext* context, const ::org::androidaudioplugin::InstanceId* request, ::org::androidaudioplugin::Unit* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AudioPluginService::Service::Destroy(::grpc::ServerContext* context, const ::org::androidaudioplugin::InstanceId* request, ::org::androidaudioplugin::Unit* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace org
}  // namespace androidaudioplugin

